<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<!-- 加载controller的时候,不加载service,因为此时事务并未生效,若此时加载了service,那么事务无法对service进行拦截 -->
	<context:component-scan base-package="com.meilele.*">
		<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" 
			/> -->
	</context:component-scan>

	<!-- 启动对@AspectJ注解的支持 -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->

	<mvc:annotation-driven />
	
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射， 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<property name="cacheSeconds" value="0" /> <property name="messageConverters"> 
		<list> <ref bean="mappingJacksonHttpMessageConverter" /> json转换器 </list> 
		</property> <property name="webBindingInitializer"> <bean class="com.meilele.order.interceptors.MyWebBinding" 
		/> </property> </bean> -->

	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="3">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/webpage/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8">
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>

	<!-- 异常处理类 -->
	<!-- <bean id="exceptionHandler" class="com.meilele.order.exception.ExceptionHandler" 
		/> -->
	<!-- 系统错误转发配置[并记录错误日志] -->
	<!-- <bean class="com.meilele.order.exception.CustomSimpleMappingExceptionResolver"> 
		<property name="defaultErrorView" value="500"></property> 默认为500，系统错误(error.jsp) 
		<property name="defaultStatusCode" value="404"></property> <property name="statusCodes">配置多个statusCode 
		<props> <prop key="error">500</prop> error.jsp <prop key="error1">404</prop> 
		error1.jsp </props> </property> <property name="exceptionMappings"> <props> 
		这里你可以根据需要定义N多个错误异常转发 <prop key="java.sql.SQLException">dbError</prop> 数据库错误(dbError.jsp) 
		<prop key="org.springframework.web.bind.ServletRequestBindingException">bizError</prop> 
		参数绑定错误(如：必须参数没传递)(bizError.jsp) <prop key="java.lang.IllegalArgumentException">bizError</prop> 
		参数错误(bizError.jsp) <prop key="org.springframework.validation.BindException">bizError</prop> 
		参数类型有误(bizError.jsp) <prop key="java.lang.Exception">unknowError</prop> 其他错误为'未定义错误'(unknowError.jsp) 
		</props> </property> </bean> -->
	<!-- 拦截器 <mvc:interceptors> <mvc:interceptor> <mvc:mapping path="/**" /> 
		<bean class="com.meilele.order.interceptors.EncodingInterceptor" /> </mvc:interceptor> 
		</mvc:interceptors> -->

	<!-- json中文编码问题 -->
<!-- 	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="com.meilele.order.utils.UTF8StringHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven> -->

	<!-- 加载资源配置文件 -->
	<context:property-placeholder location="classpath:resources/connection.properties"
		order="1" ignore-unresolvable="true" />
	<context:property-placeholder location="classpath:resources/sysConfig.properties"
		order="2" ignore-unresolvable="true" />

	<!-- <bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder" 
		p:connectionPoolSize="${memcached.connectionPoolSize}" p:failureMode="${memcached.failureMode}"> 
		XMemcachedClientBuilder have two arguments.First is server list,and second 
		is weights array. <constructor-arg> <list> <bean class="java.net.InetSocketAddress"> 
		<constructor-arg> <value>${memcached.server.host}</value> </constructor-arg> 
		<constructor-arg> <value>${memcached.server.port}</value> </constructor-arg> 
		</bean> </list> </constructor-arg> <constructor-arg> <list> <value>${memcached.server.weight}</value> 
		</list> </constructor-arg> <property name="commandFactory"> <bean class="net.rubyeye.xmemcached.command.TextCommandFactory" 
		/> </property> <property name="sessionLocator"> <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator" 
		/> </property> <property name="transcoder"> <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" 
		/> </property> </bean> Use factory bean to build memcached client <bean id="memcachedClient" 
		factory-bean="memcachedClientBuilder" factory-method="build" destroy-method="shutdown" 
		/> -->

	<!-- 后台用的memcache <bean id="memcachedClientBuilderBG" class="net.rubyeye.xmemcached.XMemcachedClientBuilder" 
		p:connectionPoolSize="${memcached.connectionPoolSize}" p:failureMode="${memcached.failureMode}"> 
		XMemcachedClientBuilder have two arguments.First is server list,and second 
		is weights array. <constructor-arg> <list> <bean class="java.net.InetSocketAddress"> 
		<constructor-arg> <value>${memcached.server.bgHost}</value> </constructor-arg> 
		<constructor-arg> <value>${memcached.server.bgPort}</value> </constructor-arg> 
		</bean> </list> </constructor-arg> <constructor-arg> <list> <value>${memcached.server.bgWeight}</value> 
		</list> </constructor-arg> <property name="commandFactory"> <bean class="net.rubyeye.xmemcached.command.TextCommandFactory" 
		/> </property> <property name="sessionLocator"> <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator" 
		/> </property> <property name="transcoder"> <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" 
		/> </property> </bean> Use factory bean to build memcached client <bean id="memcachedClientBG" 
		factory-bean="memcachedClientBuilderBG" factory-method="build" destroy-method="shutdown" 
		/> -->

	<!-- 定时任务 <bean id="rankOneJob" class="com.meilele.order.executor.TimeTaskFirst" 
		/> <bean id="rankTwoJob" class="com.meilele.order.executor.TimeTaskSecond" 
		/> <bean id="rankThreeJob" class="com.meilele.order.executor.TimeTaskThird" 
		/> <bean id="rankFourJob" class="com.meilele.order.executor.TimeTaskFourth" 
		/> <bean id="deleteImageJob" class="com.meilele.order.executor.DeleteImageJobTask" 
		/> <bean id="updateDayDayDesaleJob" class="com.meilele.order.executor.UpdateDayDayDesaleOrderTask" 
		/> 定义调用 <bean id="rankOneJobTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject" ref="rankOneJob" /> <property name="targetMethod" 
		value="doIt" /> </bean> <bean id="rankTwoJobTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject" ref="rankTwoJob" /> <property name="targetMethod" 
		value="doIt" /> </bean> <bean id="rankThreeJobTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject" ref="rankThreeJob" /> <property name="targetMethod" 
		value="doIt" /> </bean> <bean id="rankFourJobTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject" ref="rankFourJob" /> <property name="targetMethod" 
		value="doIt" /> </bean> <bean id="deleteImageJobTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject" ref="deleteImageJob" /> <property name="targetMethod" 
		value="doIt" /> </bean> <bean id="updateDayDayDesaleJobTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject" ref="updateDayDayDesaleJob" /> <property name="targetMethod" 
		value="doIt" /> </bean> 任务触发条件 <bean id="rankOneJobTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<property name="jobDetail" ref="rankOneJobTask" /> <property name="cronExpression" 
		value="/5 * * * * ?" /> </bean> <bean id="rankTwoJobTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<property name="jobDetail" ref="rankTwoJobTask" /> <property name="cronExpression" 
		value="/10 * * * * ?" /> </bean> <bean id="rankThreeJobTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<property name="jobDetail" ref="rankThreeJobTask" /> <property name="cronExpression" 
		value="/15 * * * * ?" /> </bean> <bean id="rankFourJobTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<property name="jobDetail" ref="rankFourJobTask" /> <property name="cronExpression" 
		value="/20 * * * * ?" /> </bean> <bean id="deleteImageJobTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<property name="jobDetail" ref="deleteImageJobTask" /> <property name="cronExpression" 
		value="0 0 01 * * ?" /> </bean> <bean id="updateDayDayDesaleJobTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<property name="jobDetail" ref="updateDayDayDesaleJobTask" /> <property name="cronExpression" 
		value="0 0 02 * * ?" /> </bean> 任务管理 如果将lazy-init='false'那么容器启动就会执行调度程序 <bean 
		id="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		<property name="triggers"> <list> <ref bean="rankOneJobTime" /> <ref bean="rankTwoJobTime" 
		/> <ref bean="rankThreeJobTime" /> <ref bean="rankFourJobTime" /> <ref bean="deleteImageJobTime" 
		/> <ref bean="updateDayDayDesaleJobTime" /> </list> </property> </bean> -->

	<!-- 调用StopWatch计时的Interceptor <bean id="monitoringInterceptor" class="org.javasimon.spring.MonitoringInterceptor" 
		/> 监控定义了@Monitored的方法 <bean id="monitoringAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor"> 
		<property name="advice" ref="monitoringInterceptor" /> <property name="pointcut"> 
		<bean class="org.javasimon.spring.MonitoredMeasuringPointcut" /> </property> 
		</bean> <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"> 
		<property name="proxyTargetClass" value="false" /> </bean> -->
</beans>